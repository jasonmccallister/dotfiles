#!/usr/bin/env zsh

use_aws_profile() {
    local profile="${1:-default}"

    # Get credentials using specified profile
    CREDENTIALS=$(aws configure export-credentials --profile $profile)

    # Check if the command was successful
    if [ $? -ne 0 ]; then
        echo "Error: Failed to export AWS credentials for profile: $profile, trying sso login"
        aws sso login --profile $profile
        echo  "Sleeping for 5 seconds to allow the sso login to complete"
        sleep 5
    fi

    # Extract and export credentials
    export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.AccessKeyId')
    export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.SecretAccessKey')
    export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.SessionToken')

    # Verify we got the credentials
    if [[ -n "$AWS_ACCESS_KEY_ID" && -n "$AWS_SECRET_ACCESS_KEY" ]]; then
        echo "Successfully set AWS environment variables for profile: $profile"
        echo "   Access Key ID: ${AWS_ACCESS_KEY_ID:0:5}..."
        echo "   Secret Access Key: ${AWS_SECRET_ACCESS_KEY:0:5}..."
        [[ -n "$AWS_SESSION_TOKEN" ]] && echo "   Session Token: ${AWS_SESSION_TOKEN:0:5}..."
        return 0
    else
        echo "Error: Failed to set AWS credentials for profile: $profile"
        return 1
    fi
}

dag() {
    # call build and the the dev dagger functions
    dagger-build && dagger-dev "$@"
}

dagger-build() {
    local repo="/Users/jason/go/src/github.com/jasonmccallister/dagger"

    # call ./hack/dev in the repo directory
    if [[ ! -d "$repo" ]]; then
        echo "‚ùå Dagger repository not found at $repo"
        return 1
    fi

    echo "üîß Building Dagger in $repo"
    (
        cd "$repo" || return 1
        ./hack/dev "$@"
    ) || {
        echo "‚ùå Failed to build Dagger"
        return 1
    }
}

dagger-dev() {
    export _EXPERIMENTAL_DAGGER_RUNNER_HOST="docker-container://dagger-engine.dev"

    local dagger_bin="/Users/jason/go/src/github.com/jasonmccallister/dagger/bin/dagger"

    if [[ ! -f "$dagger_bin" ]]; then
        echo "‚ùå Dagger binary not found at $dagger_bin"
        return 1
    fi

    if [[ ! -x "$dagger_bin" ]]; then
        echo "‚öôÔ∏è  Making Dagger binary executable"
        chmod +x "$dagger_bin" || {
            echo "‚ùå Failed to set executable permissions on $dagger_bin"
            return 1
        }
    fi

    "$dagger_bin" "$@"
}


cu-dev() {
    local repo="/Users/jason/go/src/github.com/jasonmccallister/container-use"

    if [[ "$1" == "update" ]]; then
        echo "üîÑ Updating container-use repository"
        if [[ -d "$repo" ]]; then
            (
                cd "$repo" || return 1
                git pull upstream main || {
                    echo "‚ùå Failed to update container-use repository"
                    exit 1
                }
            )
        else
            echo "‚ùå container-use repository not found at $repo"
            exit 1
        fi
    fi

    # call dagger call build export --path ./cu
    if [[ ! -d "$repo" ]]; then
        echo "‚ùå container-user repository not found at $repo"
        return 1
    fi

    echo "üîß Building container-use in $repo"
    (
        cd "$repo" || return 1
        dagger call build --platform current export --path ./cu
    ) || {
        echo "‚ùå Failed to build container-use"
        return 1
    }

    echo "‚úÖ Successfully built container-use"

    # move the binary to my local bin directory
    local bin_dir="$HOME/.local/bin"

    if [[ ! -d "$bin_dir" ]]; then
        echo "Creating bin directory at $bin_dir"
        mkdir -p "$bin_dir" || {
            echo "‚ùå Failed to create bin directory at $bin_dir"
            return 1
        }
    fi

    local cu_bin="$bin_dir/cu"

    if [[ -f "$cu_bin" ]]; then
        echo "Removing existing cu binary at $cu_bin"
        rm -f "$cu_bin" || {
            echo "‚ùå Failed to remove existing cu binary at $cu_bin"
            return 1
        }
    fi

    echo "Moving cu binary to $cu_bin"

    mv "$repo/cu" "$cu_bin" || {
        echo "‚ùå Failed to move cu binary to $cu_bin"
        return 1
    }

    echo "‚úÖ Successfully moved cu binary to $cu_bin"

    # hash the binary
    hash -r || {
        echo "‚ùå Failed to hash the cu binary"
        return 1
    }
}
